#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/32bb0ed8-cf4d-4977-8bea-f537cf78f5ab 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float dis;
  CloudSchedule tim;
  bool relay;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
int g = 0;
int g1 = 0;

int buttonState = 0;
int lastButtonState = 0;

const int trigPin = D6;
const int echoPin = D5;
const int ot = D2;

#define SOUND_VELOCITY 0.034
#define del 250

long duration;
float distanceCm;

void setup() {
  
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  // pinMode(D2, OUTPUT);
  pinMode(D7, OUTPUT);
  pinMode(ot, OUTPUT);
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  if (tim.isActive()) {
    g1 = 1;
  }
  else {
    g1 = 0;
  }

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculate the distance
  distanceCm = duration * SOUND_VELOCITY / 2;
  dis = distanceCm;

  if (distanceCm < 20.0 || g == 1 || g1 == 1) {
    buttonState = 1;
    digitalWrite(D7, HIGH);
  }
  else {
    buttonState = 0;
  }
  if (buttonState != lastButtonState) {
    if (distanceCm < 20.0 || g == 1 || g1 == 1) {
      digitalWrite(ot, HIGH);
      delay(del);
      digitalWrite(ot, LOW);
      lastButtonState = buttonState;
    }
    else {
      digitalWrite(D7, LOW);
      digitalWrite(ot, HIGH);
      delay(del);
      digitalWrite(ot, LOW);
      lastButtonState = buttonState;
    }
  }

  // Prints the distance on the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);
  Serial.println("g1: ");
  Serial.print(g1);
  Serial.println("g: ");
  Serial.print(g);
  
}



/*
  Since Relay is READ_WRITE variable, onRelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRelayChange()  {
  // Add your code here to act upon Relay change
  if (relay == 1) {
    g = 1;
  }
  else {
    g = 0;
  }
}

/*
  Since Dis is READ_WRITE variable, onDisChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDisChange()  {
  // Add your code here to act upon Dis change
  dis = 10;
}

/*
  Since Tim is READ_WRITE variable, onTimChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimChange()  {
  // Add your code here to act upon Tim change
}
